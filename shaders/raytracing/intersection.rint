#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

// Intersection shader for procedural spheres in the AMOURANTH RTX engine
// Handles firework particle geometry

layout(set = 0, binding = 7, scalar) readonly buffer SphereBuffer {
    vec4 spheres[]; // xyz = center, w = radius
} sphereBuffer;

layout(push_constant) uniform PushConstants {
    mat4 model;       // Object-to-world transform
    mat4 view_proj;   // View * projection transform
    vec4 energy;      // observable, potential, darkMatter, darkEnergy
} pc;

hitAttributeEXT vec2 attribs;

void main() {
    int sphereID = int(pc.energy.x);
    vec4 sphere = sphereBuffer.spheres[sphereID];
    vec3 center = (pc.model * vec4(sphere.xyz, 1.0)).xyz;
    float radius = sphere.w;

    vec3 rayOrigin = gl_WorldRayOriginEXT;
    vec3 rayDir = gl_WorldRayDirectionEXT;

    vec3 oc = rayOrigin - center;
    float a = dot(rayDir, rayDir);
    float b = 2.0 * dot(oc, rayDir);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant >= 0.0) {
        float t = (-b - sqrt(discriminant)) / (2.0 * a);
        if (t >= gl_RayTminEXT && t <= gl_RayTmaxEXT) {
            attribs = vec2(0.0, 0.0);
            reportIntersectionEXT(t, 0);
        }
    }
}