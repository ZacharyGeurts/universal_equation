#version 460
#extension GL_EXT_ray_tracing : require

layout(location = 1) hitAttributeEXT vec2 hitAttribute;

struct Sphere {
    vec3 center;
    float radius;
};
layout(binding = 4, set = 0) buffer Spheres {
    Sphere spheres[];
} sphereBuffer;

void main() {
    Sphere sphere = sphereBuffer.spheres[gl_InstanceCustomIndexEXT];

    vec3 oc = gl_WorldRayOriginEXT - sphere.center;
    float a = dot(gl_WorldRayDirectionEXT, gl_WorldRayDirectionEXT);
    float b = 2.0 * dot(oc, gl_WorldRayDirectionEXT);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant > 0.0) {
        float t = (-b - sqrt(discriminant)) / (2.0 * a);
        if (t > 0.0 && t < gl_HitTMaxEXT) {
            vec3 hitPoint = gl_WorldRayOriginEXT + t * gl_WorldRayDirectionEXT;
            vec2 uv = vec2(atan(hitPoint.z - sphere.center.z, hitPoint.x - sphere.center.x) / (2.0 * 3.14159) + 0.5,
                           acos((hitPoint.y - sphere.center.y) / sphere.radius) / 3.14159);
            hitAttribute = uv;
            reportIntersectionEXT(t, 0);
        }
    }
}