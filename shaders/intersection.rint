#version 460
#extension GL_EXT_ray_tracing : require

layout(location = 2) hitAttributeEXT vec3 attribs;

layout(push_constant) uniform PushConstants {
    mat4 viewProj;
    vec3 camPos;
    float wavePhase;
    float cycleProgress;
    float zoomFactor;
    float interactionStrength;
    float darkMatter;
    float darkEnergy;
} push;

void main() {
    float radius = push.zoomFactor * push.interactionStrength;
    vec3 center = vec3(0.0);
    vec3 rayOrigin = gl_WorldRayOriginEXT;
    vec3 rayDir = gl_WorldRayDirectionEXT;
    float tMin = gl_RayTminEXT;
    float tMax = gl_RayTmaxEXT;

    vec3 oc = rayOrigin - center;
    float a = dot(rayDir, rayDir);
    float b = 2.0 * dot(oc, rayDir);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant >= 0.0) {
        float t = (-b - sqrt(discriminant)) / (2.0 * a);
        if (t >= tMin && t <= tMax) {
            vec3 hitPoint = rayOrigin + t * rayDir;
            attribs = normalize(hitPoint - center); // Normal as hit attribute
            reportIntersectionEXT(t, 0);
        }
    }
}
